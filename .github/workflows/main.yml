name: Continuous Integration and Delivery

on: [push]

env:
  IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/summarizer

jobs:

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    env:
      HEROKU_APP_NAME: ${{ vars.HEROKU_APP_NAME }}
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/${{ vars.HEROKU_APP_NAME }}/summarizer
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${{ secrets.GHCR_PAT }} | docker login -u ${{ github.actor }} --password-stdin ghcr.io
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
      - name: Pull images
        run: |
          docker pull ${{ env.IMAGE }}-builder:latest || true
          docker pull ${{ env.IMAGE }}-final:latest || true
      - name: Build images
        run: |
          docker build \
            --target builder \
            --cache-from ${{ env.IMAGE }}-builder:latest \
            --tag ${{ env.IMAGE }}-builder:latest \
            --file ./phicite/Dockerfile.prod \
            "./phicite"
          docker build \
            --cache-from ${{ env.IMAGE }}-final:latest \
            --tag ${{ env.IMAGE }}-final:latest \
            --tag ${{ env.HEROKU_REGISTRY_IMAGE }}:latest \
            --file ./phicite/Dockerfile.prod \
            "./phicite"
      - name: Push images
        run: |
          docker push ${{ env.IMAGE }}-builder:latest
          docker push ${{ env.IMAGE }}-final:latest

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${{ secrets.GHCR_PAT }} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
      - name: Pull builder image
        run: |
          docker pull ${{ env.IMAGE }}-builder:latest
      - name: Run tests and checks in builder image
        run: |
          docker run \
            -d \
            --name fastapi-tdd \
            -e PORT=8765 \
            -e ENVIRONMENT=dev \
            -e DATABASE_URL=sqlite://sqlite.db \
            -e DATABASE_TEST_URL=sqlite://sqlite.db \
            -p 5003:8765 \
            ${{ env.IMAGE }}-builder:latest \
            sh -c "python -m pytest . && python -m ruff check ."

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: [build, test]
    env:
      HEROKU_APP_NAME: ${{ vars.HEROKU_APP_NAME }}
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/${{ vars.HEROKU_APP_NAME }}/summarizer
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull final image
        run: |
          docker pull ${{ env.HEROKU_REGISTRY_IMAGE }}:latest
      - name: Log in to the Heroku Container Registry
        run: docker login -u _ -p ${HEROKU_AUTH_TOKEN} registry.heroku.com
        env:
          HEROKU_AUTH_TOKEN: ${{ secrets.HEROKU_AUTH_TOKEN }}
      - name: Push to the registry
        run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}
      - name: Set environment variables
        run: |
          echo "HEROKU_REGISTRY_IMAGE=${{ env.HEROKU_REGISTRY_IMAGE }}" >> $GITHUB_ENV
          echo "HEROKU_AUTH_TOKEN=${{ secrets.HEROKU_AUTH_TOKEN }}" >> $GITHUB_ENV
      - name: Release
        run: |
          chmod +x ./release.sh
          ./release.sh